{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysOutput = document.querySelector('[data-days]');\nconst hoursOutput = document.querySelector('[data-hours]');\nconst minutesOutput = document.querySelector('[data-minutes]');\nconst secondsOutput = document.querySelector('[data-seconds]');\n\nstartButton.addEventListener('click', startTimer);\n\nlet intervalId = null;\nlet currentSelectedDate = null;\n\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= new Date()) {\n      return iziToast.error({\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n    }\n    currentSelectedDate = selectedDates[0];\n    startButton.disabled = false;\n  },\n};\n\nflatpickr(datePicker, options);\n\n\nfunction startTimer() {\n  intervalId = setInterval(updateTimer, 1000);\n  datePicker.disabled = true;\n  startButton.disabled = true;\n}\n\nfunction updateTimer() {\n  const currentTime = currentSelectedDate - new Date();\n  if (currentTime <= 0) {\n    datePicker.disabled = false;\n    clearInterval(intervalId);\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(currentTime);\n\n  daysOutput.textContent = String(days).padStart(2, 0);\n  hoursOutput.textContent = String(hours).padStart(2, 0);\n  minutesOutput.textContent = String(minutes).padStart(2, 0);\n  secondsOutput.textContent = String(seconds).padStart(2, 0);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["datePicker","startButton","daysOutput","hoursOutput","minutesOutput","secondsOutput","startTimer","intervalId","currentSelectedDate","options","selectedDates","iziToast","flatpickr","updateTimer","currentTime","days","hours","minutes","seconds","convertMs","ms"],"mappings":"2GAKA,MAAMA,EAAa,SAAS,cAAc,kBAAkB,EACtDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAa,SAAS,cAAc,aAAa,EACjDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAgB,SAAS,cAAc,gBAAgB,EACvDC,EAAgB,SAAS,cAAc,gBAAgB,EAE7DJ,EAAY,iBAAiB,QAASK,CAAU,EAEhD,IAAIC,EAAa,KACbC,EAAsB,KAG1B,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,GAAIA,EAAc,CAAC,GAAK,IAAI,KAC1B,OAAOC,EAAS,MAAM,CACpB,SAAU,WACV,QAAS,oCACjB,CAAO,EAEHH,EAAsBE,EAAc,CAAC,EACrCT,EAAY,SAAW,EACxB,CACH,EAEAW,EAAUZ,EAAYS,CAAO,EAG7B,SAASH,GAAa,CACpBC,EAAa,YAAYM,EAAa,GAAI,EAC1Cb,EAAW,SAAW,GACtBC,EAAY,SAAW,EACzB,CAEA,SAASY,GAAc,CACrB,MAAMC,EAAcN,EAAsB,IAAI,KAC9C,GAAIM,GAAe,EAAG,CACpBd,EAAW,SAAW,GACtB,cAAcO,CAAU,EACxB,MACD,CAED,KAAM,CAAE,KAAAQ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAW,EAE/DZ,EAAW,YAAc,OAAOa,CAAI,EAAE,SAAS,EAAG,CAAC,EACnDZ,EAAY,YAAc,OAAOa,CAAK,EAAE,SAAS,EAAG,CAAC,EACrDZ,EAAc,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,CAAC,EACzDZ,EAAc,YAAc,OAAOa,CAAO,EAAE,SAAS,EAAG,CAAC,CAC3D,CAEA,SAASC,EAAUC,EAAI,CAOrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}